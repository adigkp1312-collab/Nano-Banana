import React from 'react';

interface DisplayPanelProps {
  image: string | null;
  isLoading: boolean;
  error: string | null;
}

const LoadingSpinner: React.FC = () => (
  <div className="flex flex-col items-center justify-center gap-4 text-center">
    <div className="w-16 h-16 border-4 border-dashed rounded-full animate-spin border-indigo-400"></div>
    <h3 className="text-lg font-semibold text-white">Generating your masterpiece...</h3>
    <p className="text-gray-400">The AI is warming up its creative circuits. This might take a moment.</p>
  </div>
);

const ErrorDisplay: React.FC<{ message: string }> = ({ message }) => (
  <div className="flex flex-col items-center justify-center gap-4 text-center bg-red-900/20 border border-red-500/50 p-8 rounded-lg">
    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-red-400"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>
    <h3 className="text-lg font-semibold text-red-300">An Error Occurred</h3>
    <p className="text-red-400 max-w-md">{message}</p>
  </div>
);

const Placeholder: React.FC = () => (
    <div className="flex flex-col items-center justify-center gap-4 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-600"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>
        <h3 className="text-xl font-semibold text-gray-400">Your image will appear here</h3>
        <p className="text-gray-500 max-w-sm">Use the controls on the left to generate a new image or upload one to start editing.</p>
    </div>
);

const DownloadIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" /><polyline points="7 10 12 15 17 10" /><line x1="12" x2="12" y1="15" y2="3" /></svg>
);


export const DisplayPanel: React.FC<DisplayPanelProps> = ({ image, isLoading, error }) => {
  const handleDownload = () => {
    if (!image) return;
    const link = document.createElement('a');
    link.href = image;
    const mimeType = image.substring(image.indexOf(':') + 1, image.indexOf(';'));
    const extension = mimeType.split('/')[1] || 'png';
    link.download = `whisk-tool-${Date.now()}.${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="bg-gray-800/50 border border-gray-700 w-full h-full min-h-[400px] lg:min-h-0 rounded-lg flex items-center justify-center p-4 relative overflow-hidden">
      <div className="absolute inset-0 bg-grid-pattern opacity-5"></div>
      <div className="z-10 w-full h-full flex items-center justify-center">
        {isLoading && <LoadingSpinner />}
        {!isLoading && error && <ErrorDisplay message={error} />}
        {!isLoading && !error && !image && <Placeholder />}
        {!isLoading && !error && image && (
          <div className="relative w-full h-full flex items-center justify-center">
            <img 
              src={image} 
              alt="Generated by AI" 
              className="max-w-full max-h-full object-contain rounded-md shadow-2xl animate-fade-in"
            />
            <button
              onClick={handleDownload}
              className="absolute top-4 right-4 bg-gray-900/60 text-white p-2.5 rounded-full hover:bg-indigo-600 backdrop-blur-sm transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500"
              aria-label="Download image"
              title="Download image"
            >
              <DownloadIcon className="w-5 h-5" />
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

// Add CSS for fade-in animation and grid pattern
const style = document.createElement('style');
style.innerHTML = `
  @keyframes fadeIn {
    from { opacity: 0; transform: scale(0.98); }
    to { opacity: 1; transform: scale(1); }
  }
  .animate-fade-in {
    animation: fadeIn 0.5s ease-out forwards;
  }
  .bg-grid-pattern {
    background-image: linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px), linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 2rem 2rem;
  }
`;
document.head.appendChild(style);